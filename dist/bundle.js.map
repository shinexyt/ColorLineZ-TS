{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/a-star-map.ts","src/action.ts","src/canvas.ts","src/common-method.ts","src/index.ts","src/node.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","node_1","Map","gridColumns","gridSize","this","data","openArea","paths","closeArea","cache","startNode","endNode","costEnergy_S","costEnergy_L","gridRows","y","_arr","x","mapNode","Node","id","push","prototype","getNode","setStartNode","node","setEndNode","isOpenAreaExitNode","getPath","getAroundNode","search","doPaths","_fMinNode","getFMin","drawRoad","prev","orderOpenArea","shift","sort","objF","objN","fObj","F","resetArea","isRoadBlock","nodeX","nodeY","maxHeight","maxWidth","Math","abs","isCorner","_fObj","getF","tmpNode","G","cNode","aNode","_H","_G","H","obj","a_star_map_1","common_method_1","Action","_this","num","num1","result","colors","eliminatedBalls","ballRadius","score","stopMoveAnimation","stopJump","stopRemove","click","event","mousePos","getMousePos","map","cancelAnimationFrame","RemoveBall","currentY","CreateBall","color","SelectBall","playSound","SmoothPath","currentColor","moveAnimation","JumpBall","flag","requestAnimationFrame","checkResult","RemoveBalls","canvas","document","getElementById","context","getContext","addEventListener","tipsCanvas","tipsContext","Init","CreateInitialBall","GetNextColors","GetRandomColor","GetRandomNum","CommonMethod","getId","floor","random","grd","createRadialGradient","addColorStop","fillStyle","beginPath","arc","PI","fill","nextColors","CreateTipsBall","evt","rect","getBoundingClientRect","clientX","left","width","clientY","top","height","ceil","clearRect","uri","Audio","play","frames","reverse","tempPath","step","unshift","j","getEliminatedBalls","getScore","innerText","toString","ClearPathBalls","CreateNextBall","h","v","k","leftNode","concat","startScore","CheckIsGameOver","alert","window","location","reload","autoCheckResult","count","item","MyCanvas","drawRect","bgContext","endPoint","moveTo","lineTo","stroke","closePath","canvas_1","action_1","bgColor"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import { Node, FGH } from \"./node\";\r\ninterface IndexNode {\r\n    [index: string]: Node;\r\n}\r\nexport interface Pointer {\r\n    x: number;\r\n    y: number;\r\n}\r\nexport class Map {\r\n    private data: Node[][] = [];\r\n    private openArea: Node[] = [];\r\n    paths: Pointer[] = [];\r\n    closeArea: IndexNode = {};\r\n    cache: IndexNode = {};\r\n    startNode: Node = null;\r\n    endNode: Node = null;\r\n    private costEnergy_S = 10;\r\n    private costEnergy_L = 14;\r\n    private gridColumns: number;\r\n    private gridRows: number;\r\n    private gridSize: number;\r\n    constructor(gridColumns: number, gridSize: number) {\r\n        this.gridColumns = gridColumns;\r\n        this.gridRows = gridColumns;\r\n        this.gridSize = gridSize;\r\n        this.data = [];\r\n        for (let y = 0; y < this.gridColumns; y++) {\r\n            let _arr = [];\r\n            for (let x = 0; x < this.gridColumns; x++) {\r\n                let mapNode = new Node(this.gridSize * x + this.gridSize / 2, this.gridSize * y + this.gridSize / 2);\r\n                this.cache[mapNode.id] = mapNode;\r\n                _arr.push(mapNode);\r\n            }\r\n            this.data.push(_arr);\r\n        }\r\n    }\r\n    getNode(x: number, y: number): Node {\r\n        return this.cache[`map_${x}_${y}`];\r\n    }\r\n    setStartNode(node: Node) {\r\n        this.startNode = node;\r\n    }\r\n    setEndNode(node: Node) {\r\n        this.endNode = node;\r\n    }\r\n    private isOpenAreaExitNode(node: Node): Node {\r\n        let openArea = this.openArea;\r\n        for (let i = 0; i < openArea.length; i++) {\r\n            if (openArea[i].id === node.id)\r\n                return openArea[i];\r\n        }\r\n        return null;\r\n    }\r\n    getPath() {\r\n        this.getAroundNode(this.startNode);\r\n        if (this.openArea.length == 0)\r\n            return;\r\n        this.search(this.endNode);\r\n        this.doPaths(this.endNode);\r\n    }\r\n    /**  不断删除查找周围节点，直到找寻到结束点 */\r\n    private search(node: Node) {\r\n        while (!this.closeArea[node.id]) {\r\n            let _fMinNode = this.getFMin();\r\n            if (!_fMinNode)\r\n                break;\r\n            this.getAroundNode(_fMinNode);\r\n            this.search(node);\r\n        }\r\n    }\r\n    private doPaths(node: Node) {\r\n        if (this.closeArea[node.id]) {\r\n            this.drawRoad(node);\r\n        }\r\n    }\r\n    /**  绘制路线 */\r\n    private drawRoad(node: Node) {\r\n        this.paths.push(node);\r\n        //delete map.closeArea[node.id];\r\n        if (node.prev !== this.startNode)\r\n            this.drawRoad(node.prev);\r\n    }\r\n    /**  从开启列表从寻找F点最小的点 从开启列表移除 移入关闭列表 */\r\n    private getFMin() {\r\n        if (this.openArea.length == 0)\r\n            return null;\r\n        this.orderOpenArea();\r\n        this.closeArea[this.openArea[0].id] = this.openArea[0];\r\n        return this.openArea.shift();\r\n    }\r\n    /**  排序开启列表 */\r\n    private orderOpenArea() {\r\n        this.openArea.sort(function (objF, objN) {\r\n            return objF.fObj.F - objN.fObj.F;\r\n        });\r\n    }\r\n    resetArea() {\r\n        this.openArea = [];\r\n        this.closeArea = {};\r\n        for (let y = 0; y < this.gridRows; y++) {\r\n            for (let x = 0; x < this.gridColumns; x++) {\r\n                let id = `map_${this.gridSize * x + this.gridSize / 2}_${this.gridSize * y + this.gridSize / 2}`\r\n                let node = this.cache[id];\r\n                if (node.isRoadBlock === true)\r\n                    this.closeArea[id] = node;\r\n            }\r\n        }\r\n    }\r\n    /**  获取当前父节点周围的点  */\r\n    private getAroundNode(node: Node) {\r\n        let maxHeight = this.gridRows;\r\n        let maxWidth = this.gridColumns;\r\n        let nodeX;\r\n        let nodeY;\r\n        let corner = [];\r\n        for (let x = -1 * this.gridSize; x <= this.gridSize; x += this.gridSize) {\r\n            nodeX = node.x + x;\r\n            for (let y = -1 * this.gridSize; y <= this.gridSize; y += this.gridSize) {\r\n                nodeY = node.y + y;\r\n                //剔除本身以及对角线的点\r\n                if ((x === 0 && y === 0) || x * y != 0)\r\n                    continue;\r\n                if (nodeX > 0 && nodeY > 0 && nodeX <= maxWidth * this.gridSize && nodeY <= maxHeight * this.gridSize) {\r\n                    let mapNode = this.getNode(nodeX, nodeY);\r\n                    //查找周围的新节点， 如果新节点处于拐角则跳过\r\n                    if (Math.abs(x) == Math.abs(y) && this.isCorner(mapNode, {\r\n                        x: x,\r\n                        y: y\r\n                    }))\r\n                        continue;\r\n                    if (!this.closeArea[mapNode.id]) {\r\n                        let _fObj: FGH = this.getF(node, mapNode);\r\n                        // 如果周围节点已在开启区域的 根据当前节点 获取新的G值  与当前点的进行比较 如果小于以前的G值 则指定当前节点为其父节点\r\n                        let tmpNode = this.isOpenAreaExitNode(mapNode);\r\n                        if (tmpNode) {\r\n                            if (tmpNode.fObj.G <= _fObj.G)\r\n                                continue;\r\n                        }\r\n                        mapNode.fObj = _fObj;\r\n                        mapNode.prev = node;\r\n                        this.openArea.push(mapNode);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**  获取当前点的F G H值 */\r\n    private getF(cNode: Node, aNode: Node) {\r\n        let energyW = Math.abs(this.endNode.x - aNode.x) * this.costEnergy_S;\r\n        let energyH = Math.abs(this.endNode.y - aNode.y) * this.costEnergy_S;\r\n        let _H = energyW + energyH;\r\n        let _G = (Math.abs(aNode.x - cNode.x) === Math.abs(aNode.y - cNode.y) ? this.costEnergy_L : this.costEnergy_S);\r\n        if (cNode.fObj)\r\n            _G = cNode.fObj.G + _G;\r\n        return {\r\n            F: _H + _G,\r\n            H: _H,\r\n            G: _G\r\n        };\r\n    }\r\n    /**  监测节点是否为拐角， 如果是 从开启列表中移除穿越拐角到达的点 */\r\n    private isCorner(node: Node, obj: Pointer) {\r\n        let closeArea = this.closeArea;\r\n        let x = obj.x;\r\n        let y = obj.y;\r\n        let getNode = this.getNode;\r\n        if (Math.abs(x) === Math.abs(y)) {\r\n            if (x > 0 && y < 0) {\r\n                return closeArea[getNode(node.x, node.y + 1).id] || closeArea[getNode(node.x - 1, node.y).id];\r\n            }\r\n            if (x < 0 && y > 0) {\r\n                return closeArea[getNode(node.x, node.y - 1).id] || closeArea[getNode(node.x + 1, node.y).id];\r\n            }\r\n            if (x === y && x > 0) {\r\n                return closeArea[getNode(node.x, node.y - 1).id] || closeArea[getNode(node.x - 1, node.y).id];\r\n            }\r\n            if (x === y && x < 0) {\r\n                return closeArea[getNode(node.x, node.y + 1).id] || closeArea[getNode(node.x + 1, node.y).id];\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Map, Pointer } from \"./a-star-map\";\r\nimport { CommonMethod } from \"./common-method\"\r\nexport class Action {\r\n    private map: Map;\r\n    private canvas: HTMLCanvasElement;\r\n    private context: CanvasRenderingContext2D;\r\n    private tipsContext: CanvasRenderingContext2D;\r\n    private gridSize: number;\r\n    private gridColumns: number;\r\n    private gridRows: number;\r\n    private num = 0;\r\n    private num1 = 0;\r\n    private result = 0;\r\n    private colors = [\"red\", \"blue\", \"orange\", \"green\", \"brown\"];\r\n    private nextColors: string[];\r\n    private eliminatedBalls: any = [];\r\n    private ballRadius = 13;\r\n    private score = 0;\r\n    private stopMoveAnimation: number = null;\r\n    private currentColor: string;\r\n    private stopJump: number = null;\r\n    private stopRemove: number = null;\r\n    constructor(gridColumns: number, gridSize: number) {\r\n        this.gridSize = gridSize;\r\n        this.gridColumns = gridColumns;\r\n        this.gridRows = gridColumns;\r\n\r\n        this.map = new Map(gridColumns, gridSize);\r\n\r\n        this.canvas = <HTMLCanvasElement>document.getElementById(\"myCanvas\");\r\n        this.context = this.canvas.getContext(\"2d\");\r\n        this.canvas.addEventListener('click', this.click, false);\r\n\r\n        let tipsCanvas = <HTMLCanvasElement>document.getElementById(\"tipsCanvas\");\r\n        this.tipsContext = tipsCanvas.getContext(\"2d\");\r\n    }\r\n    Init() {\r\n        this.CreateInitialBall();\r\n        this.GetNextColors();\r\n    }\r\n    private CreateInitialBall() {\r\n        for (let i = 0; i < 5; i++) {\r\n            let color = this.GetRandomColor();\r\n            let x = this.GetRandomNum();\r\n            let y = this.GetRandomNum();\r\n            let node = this.map.getNode(x, y);\r\n            let id = CommonMethod.getId(x, y);\r\n            if (!node.isRoadBlock) {\r\n                node.isRoadBlock = true;\r\n                node.color = color;\r\n                this.map.closeArea[id] = node;\r\n                this.CreateBall(color, x, y);\r\n            }\r\n            else\r\n                i--;\r\n        }\r\n    }\r\n    private GetRandomColor() {\r\n        return this.colors[Math.floor(Math.random() * 5)];\r\n    }\r\n    private GetRandomNum() {\r\n        return this.gridSize * Math.floor(Math.random() * 9) + this.gridSize / 2;\r\n    }\r\n    private CreateBall(color: string, x: number, y: number) {\r\n        //增加小球渐变颜色，实现粗糙光照3d效果。\r\n        let grd = this.context.createRadialGradient(x - 2, y - 2, 1, x, y, 10);\r\n        grd.addColorStop(1, color);\r\n        grd.addColorStop(0, \"white\");\r\n        // context.fillStyle = \"rgba(255,255,255,0.5)\";\r\n        this.context.fillStyle = grd;\r\n        this.context.beginPath();\r\n        this.context.arc(x, y, this.ballRadius, 0, 2 * Math.PI);\r\n        this.context.fill();\r\n    }\r\n    private GetNextColors() {\r\n        this.nextColors = [];\r\n        this.nextColors.push(this.colors[Math.floor(Math.random() * 5)]);\r\n        this.nextColors.push(this.colors[Math.floor(Math.random() * 5)]);\r\n        this.nextColors.push(this.colors[Math.floor(Math.random() * 5)]);\r\n        this.CreateTipsBall(this.nextColors[0], 15, 15);\r\n        this.CreateTipsBall(this.nextColors[1], 45, 15);\r\n        this.CreateTipsBall(this.nextColors[2], 75, 15);\r\n    }\r\n    private CreateTipsBall(color: string, x: number, y: number) {\r\n        //增加小球渐变颜色，实现粗糙光照3d效果。\r\n        let grd = this.tipsContext.createRadialGradient(x - 2, y - 2, 1, x, y, 10);\r\n        grd.addColorStop(1, color);\r\n        grd.addColorStop(0, \"white\");\r\n        // context.fillStyle = \"rgba(255,255,255,0.5)\";\r\n        this.tipsContext.fillStyle = grd;\r\n        this.tipsContext.beginPath();\r\n        this.tipsContext.arc(x, y, this.ballRadius, 0, 2 * Math.PI);\r\n        this.tipsContext.fill();\r\n    }\r\n    private click = (event: MouseEvent) => {\r\n        let mousePos = this.getMousePos(event);\r\n        let node = this.map.getNode(mousePos.x, mousePos.y);\r\n        if (!node) {\r\n            return;\r\n        }\r\n        if (node.isRoadBlock) {\r\n            cancelAnimationFrame(this.stopJump);\r\n            if (this.map.startNode) {\r\n                this.RemoveBall(this.map.startNode.x, this.map.startNode.currentY);\r\n                this.CreateBall(this.map.startNode.color, this.map.startNode.x, this.map.startNode.y);\r\n            }\r\n            this.map.setStartNode(node);\r\n            this.SelectBall();\r\n        }\r\n        else {\r\n            if (!this.map.startNode) {\r\n                this.playSound('media/click-error.mp3');\r\n                return;\r\n            }\r\n            this.map.setEndNode(node);\r\n            this.map.getPath();\r\n            if (this.map.paths.length > 0) {\r\n                cancelAnimationFrame(this.stopJump);\r\n                this.RemoveBall(this.map.startNode.x, this.map.startNode.currentY);\r\n                this.map.paths = this.SmoothPath(5);\r\n                this.currentColor = this.map.startNode.color;\r\n                // this.map.startNode.color = this.bgColor;\r\n                this.map.startNode.color = '';\r\n                this.map.startNode.isRoadBlock = false;\r\n                this.num = 1;\r\n                this.playSound('media/run.mp3');\r\n                this.moveAnimation();\r\n            }\r\n            else {\r\n                this.playSound('media/click-error1.mp3');\r\n                this.map.resetArea();\r\n            }\r\n        }\r\n    }\r\n    private getMousePos(evt: MouseEvent) {\r\n        let rect = this.canvas.getBoundingClientRect();\r\n        let x = evt.clientX - rect.left * (this.canvas.width / rect.width);\r\n        let y = evt.clientY - rect.top * (this.canvas.height / rect.height);\r\n        let gridSize = this.gridSize;\r\n        return {\r\n            x: Math.ceil(x / gridSize) * gridSize - gridSize / 2,\r\n            y: Math.ceil(y / gridSize) * gridSize - gridSize / 2\r\n        };\r\n    }\r\n    private RemoveBall(x: number, y: number) {\r\n        let ballRadius = this.ballRadius;\r\n        this.context.clearRect(x - ballRadius, y - ballRadius, ballRadius * 2, ballRadius * 2);\r\n    }\r\n    private SelectBall() {\r\n        this.playSound('media/click.mp3');\r\n        this.map.startNode.currentY = this.map.startNode.y;\r\n        //小球每一帧跳动幅度\r\n        this.map.startNode.flag = 1;\r\n        this.JumpBall();\r\n    }\r\n    private JumpBall = () => {\r\n        this.RemoveBall(this.map.startNode.x, this.map.startNode.currentY);\r\n        //小球跳动范围\r\n        if (Math.abs(this.map.startNode.currentY - this.map.startNode.y) == 8)\r\n            this.map.startNode.flag *= -1;\r\n        this.map.startNode.currentY += this.map.startNode.flag;\r\n        this.CreateBall(this.map.startNode.color, this.map.startNode.x, this.map.startNode.currentY);\r\n        this.stopJump = requestAnimationFrame(this.JumpBall);\r\n    }\r\n    private playSound(uri: string) {\r\n        let audio = new Audio(uri);\r\n        audio.play();\r\n    }\r\n    private SmoothPath(frames: number) {\r\n        this.map.paths.reverse();\r\n        let tempPath = [];\r\n        let step = this.gridSize / frames;\r\n        this.map.paths.unshift({\r\n            x: this.map.startNode.x,\r\n            y: this.map.startNode.y\r\n        });\r\n        for (let i = 1; i < this.map.paths.length; i++) {\r\n            tempPath.push({\r\n                x: this.map.paths[i - 1].x,\r\n                y: this.map.paths[i - 1].y\r\n            });\r\n            if (this.map.paths[i - 1].x === this.map.paths[i].x) {\r\n                let flag = 1;\r\n                if (this.map.paths[i - 1].y > this.map.paths[i].y)\r\n                    flag = -1;\r\n                for (let j = 1; j < frames; j++) {\r\n                    tempPath.push({\r\n                        x: this.map.paths[i - 1].x,\r\n                        y: this.map.paths[i - 1].y + flag * j * step\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                let flag = 1;\r\n                if (this.map.paths[i - 1].x > this.map.paths[i].x)\r\n                    flag = -1;\r\n                for (let j = 1; j < frames; j++) {\r\n                    tempPath.push({\r\n                        x: this.map.paths[i - 1].x + flag * j * step,\r\n                        y: this.map.paths[i - 1].y\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        tempPath.push({\r\n            x: this.map.paths[this.map.paths.length - 1].x,\r\n            y: this.map.paths[this.map.paths.length - 1].y\r\n        });\r\n        return tempPath;\r\n    }\r\n    private moveAnimation = () => {\r\n        this.RemoveBall(this.map.paths[this.num - 1].x, this.map.paths[this.num - 1].y);\r\n        let x = this.map.paths[this.num].x;\r\n        let y = this.map.paths[this.num].y;\r\n        this.CreateBall(this.currentColor, x, y);\r\n        this.num++;\r\n        if (this.num >= this.map.paths.length) {\r\n            cancelAnimationFrame(this.stopMoveAnimation);\r\n            let node = this.map.getNode(x, y);\r\n            node.color = this.currentColor;\r\n            node.isRoadBlock = true;\r\n            this.num = 0;\r\n            this.map.paths = [];\r\n            this.map.startNode = null;\r\n            this.checkResult();\r\n            this.map.resetArea();\r\n        }\r\n        else {\r\n            this.stopMoveAnimation = requestAnimationFrame(this.moveAnimation);\r\n        }\r\n    }\r\n    private checkResult() {\r\n        this.getEliminatedBalls();\r\n        if (this.eliminatedBalls.length >= 4) {\r\n            if (this.eliminatedBalls.length + 1 == 5)\r\n                this.score += 10;\r\n            else {\r\n                this.getScore(10);\r\n                this.score += this.result;\r\n                this.result = 0;\r\n            }\r\n            document.getElementById('scoreboard').innerText = this.score.toString();\r\n            this.ClearPathBalls();\r\n        }\r\n        else {\r\n            this.eliminatedBalls = [];\r\n            this.CreateNextBall();\r\n            this.GetNextColors();\r\n        }\r\n    }\r\n    private getEliminatedBalls() {\r\n        let node = this.map.endNode;\r\n        let h = [];\r\n        let v = [];\r\n        let l = [];\r\n        let r = [];\r\n        for (let i = -1; i < 2; i++) {\r\n            for (let j = -1; j < 2; j++) {\r\n                if (i == 0 && j == 0)\r\n                    continue;\r\n                for (let k = 1; k < 9; k++) {\r\n                    if (node.x + i * k * this.gridSize > 0 && node.x + i * k * this.gridSize < 380 && node.y + j * k * this.gridSize > 0 && node.y + j * k * this.gridSize < 380) {\r\n                        let leftNode = this.map.cache[CommonMethod.getId(node.x + i * k * this.gridSize, node.y + j * k * this.gridSize)];\r\n                        if (leftNode.color == node.color) {\r\n                            if (Math.abs(i + j) == 2)\r\n                                r.push(leftNode);\r\n                            else if (Math.abs(i + j) == 0)\r\n                                l.push(leftNode);\r\n                            else if (i == 0)\r\n                                v.push(leftNode);\r\n                            else\r\n                                h.push(leftNode);\r\n                            //eliminatedBalls.push(leftNode);\r\n                        }\r\n                        else\r\n                            break;\r\n                    }\r\n                    else\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (h.length >= 4)\r\n            this.eliminatedBalls = this.eliminatedBalls.concat(h);\r\n        if (v.length >= 4)\r\n            this.eliminatedBalls = this.eliminatedBalls.concat(v);\r\n        if (l.length >= 4)\r\n            this.eliminatedBalls = this.eliminatedBalls.concat(l);\r\n        if (r.length >= 4)\r\n            this.eliminatedBalls = this.eliminatedBalls.concat(r);\r\n    }\r\n    private getScore(startScore: number) {\r\n        this.num++;\r\n        this.result = startScore + 4 * this.num - 2;\r\n        if (this.num < this.eliminatedBalls.length + 1 - 5)\r\n            this.getScore(this.result);\r\n        else\r\n            this.num = 0;\r\n    }\r\n    private ClearPathBalls() {\r\n        this.playSound('media/bingo.mp3');\r\n        this.map.endNode.color = '';\r\n        this.map.endNode.isRoadBlock = false;\r\n        for (let i = 0; i < this.eliminatedBalls.length; i++) {\r\n            this.eliminatedBalls[i].isRoadBlock = false;\r\n            this.eliminatedBalls[i].color = '';\r\n        }\r\n        this.RemoveBall(this.map.endNode.x, this.map.endNode.y);\r\n        this.RemoveBalls();\r\n    }\r\n    private RemoveBalls = () => {\r\n        this.RemoveBall(this.eliminatedBalls[this.num1].x, this.eliminatedBalls[this.num1].y);\r\n        this.num1++;\r\n        if (this.num1 < this.eliminatedBalls.length)\r\n            this.stopRemove = requestAnimationFrame(this.RemoveBalls);\r\n        else {\r\n            this.num1 = 0;\r\n            this.eliminatedBalls = [];\r\n            cancelAnimationFrame(this.stopRemove);\r\n        }\r\n    }\r\n    private CreateNextBall() {\r\n        for (let i = 0; i < 3; i++) {\r\n            let color = this.nextColors[i];\r\n            let x = this.GetRandomNum();\r\n            let y = this.GetRandomNum();\r\n            let node = this.map.getNode(x, y);\r\n            let id = CommonMethod.getId(x, y);\r\n            if (!node.isRoadBlock) {\r\n                node.isRoadBlock = true;\r\n                node.color = color;\r\n                this.map.closeArea[id] = node;\r\n                if (!this.CheckIsGameOver()) {\r\n                    this.CreateBall(color, x, y);\r\n                    this.map.setEndNode(node);\r\n                    this.autoCheckResult();\r\n                }\r\n                else {\r\n                    alert('Game Over!');\r\n                    window.location.reload();\r\n                    break;\r\n                }\r\n            }\r\n            else\r\n                i--;\r\n        }\r\n    }\r\n    private CheckIsGameOver() {\r\n        let count = 0;\r\n        for (let item in this.map.closeArea) {\r\n            count++;\r\n        }\r\n        if (count === this.gridColumns * this.gridRows) {\r\n            return true;\r\n        }\r\n        else\r\n            return false;\r\n    }\r\n    private autoCheckResult() {\r\n        this.getEliminatedBalls();\r\n        if (this.eliminatedBalls.length >= 4) {\r\n            this.ClearPathBalls();\r\n        }\r\n        else {\r\n            this.eliminatedBalls = [];\r\n        }\r\n    }\r\n}","/**画布类 */\r\nexport class MyCanvas {\r\n    private gridColumns: number;\r\n    private gridSize: number;\r\n    constructor(gridColumns: number, gridSize: number) {\r\n        this.gridColumns = gridColumns;\r\n        this.gridSize = gridSize;\r\n    }\r\n    /**绘制棋盘 */\r\n    drawRect() {\r\n        let bgCanvas = <HTMLCanvasElement>document.getElementById(\"bgCanvas\");\r\n        let bgContext = bgCanvas.getContext(\"2d\");\r\n        let endPoint = this.gridColumns * this.gridSize;\r\n        // bgContext.lineWidth = 0.5;\r\n        for (let i = 0; i <= endPoint; i += this.gridSize) {\r\n            bgContext.beginPath();\r\n            bgContext.moveTo(0, i);\r\n            bgContext.lineTo(endPoint, i);\r\n            bgContext.stroke();\r\n            bgContext.closePath();\r\n            bgContext.beginPath();\r\n            bgContext.moveTo(i, 0);\r\n            bgContext.lineTo(i, endPoint);\r\n            bgContext.stroke();\r\n            bgContext.closePath();\r\n        }\r\n    }\r\n}","export class CommonMethod {\r\n    static getId(x: number, y: number) {\r\n        return `map_${x}_${y}`\r\n    }\r\n}","import { MyCanvas } from \"./canvas\";\r\nimport { Action } from \"./action\";\r\n\r\nconst gridColumns = 9;\r\nconst gridSize = 40;\r\n\r\ndocument.bgColor =  \"beige\";\r\n\r\nlet myCanvas = new MyCanvas(gridColumns, gridSize);\r\nmyCanvas.drawRect();\r\n\r\nlet mainAction = new Action(gridColumns, gridSize);\r\nmainAction.Init();\r\n","import { CommonMethod } from \"./common-method\"\r\nexport interface FGH {\r\n    F: number;\r\n    G: number;\r\n    H: number;\r\n}\r\nexport class Node {\r\n    x: number;\r\n    y: number;\r\n    id: string;\r\n    currentY: number;\r\n    flag: number;\r\n    isRoadBlock = false;\r\n    prev: Node = null;\r\n    fObj: FGH = null;\r\n    color = '';\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.id = CommonMethod.getId(x,y);\r\n    }\r\n}\r\n"]}